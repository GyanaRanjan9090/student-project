{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/student/student.component.ts","webpack:///src/app/student/student.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","LoginComponent","fb","router","loginForm","group","email","required","password","minLength","onLogin","valid","navigate","StudentComponent","formBuilder","showadd","showupdate","studentList","currentEditIndex","logout","ngOnInit","formValue","name","mobile","pattern","city","add","reset","addStudent","newStudent","value","push","editStudent","index","student","patchValue","updateStudent","deleteStudent","splice","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { StudentComponent } from './student/student.component';\n\n\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/login', pathMatch: 'full' }, // Default route\n  { path: 'login', component: LoginComponent },\n  { path: 'student', component: StudentComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)], // Configure the router\n  exports: [RouterModule]      // Export it so other modules can use the routE\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'student';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { StudentComponent } from './student/student.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\n//import { ToastrModule } from 'ngx-toastr';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StudentComponent,\n    LoginComponent,\n    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n  \n    //ToastrModule\n\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private router: Router) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onLogin() {\n    if (this.loginForm.valid) {\n      // Add actual authentication logic here\n      this.router.navigate(['/student']);\n    }\n  }\n}\n","\n\n<!--div class=\"container mt-35\">\n    <h2>Login</h2>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter your email\" />\n      </div>\n      <div class=\"form-group mt-3\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Enter your password\" />\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary mt-3\">Login</button>\n    </form>\n  </div-->\n\n\n  <nav class=\"navbar navbar-light bg-dark\">\n    <div class=\"container-fluid\">\n      <h2 class=\"text-light primary py-3\">STUDENT MANAGEMENT </h2>\n      <div class=\"d-flex\">\n\n      </div>\n    </div>\n  </nav>\n<div  class=\"container mt-5\" style=\"background-color: greenyellow; width: 600px; border-radius: 10px; border-color: black; \">\n    <div class=\"border p-4 rounded shadow-sm\">\n    <h2>Login</h2>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter your email\" />\n      </div>\n      <div class=\"form-group mt-3\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Enter your password\" />\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary mt-3\">Login</button>\n    </form>\n  </div>\n</div> \n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n//import { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-student',\n  templateUrl: './student.component.html',\n  styleUrls: ['./student.component.scss'] // Ensure this is correct\n})\nexport class StudentComponent implements OnInit {\n  showadd: boolean = false;\n  showupdate: boolean = false;\n\n  formValue: FormGroup;\n  studentList: any[] = []; // Dynamic array to hold student data\n  currentEditIndex: number | null = null; // Index of student being edited\n\n  constructor(private formBuilder: FormBuilder , private router: Router ) {}   //private toastr: ToastrService\n  logout() {\n    this.router.navigate(['/login']);\n  }\n\n  ngOnInit(): void {\n    this.formValue = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      mobile: ['', [Validators.required, Validators.pattern(/^[0-9]{10}$/)]],\n      city: ['', Validators.required],\n    });\n  }\n\n  add() {\n    this.showadd = true;\n    this.showupdate = false;\n    this.formValue.reset(); // Clear the form for new entries\n\n    //this.toastr.success('Student added successfully!');\n  }\n\n  addStudent() {\n    const newStudent = this.formValue.value; // Get form data\n    this.studentList.push(newStudent); // Add new student to the list\n    this.formValue.reset(); // Reset the form\n    this.showadd = false; // Close the modal\n  }\n\n  editStudent(index: number) {\n    this.currentEditIndex = index;\n    const student = this.studentList[index];\n    this.formValue.patchValue(student); // Populate the form with student data\n    this.showadd = false;\n    this.showupdate = true;\n  }\n\n  \n  updateStudent() {\n    if (this.currentEditIndex !== null) {\n      this.studentList[this.currentEditIndex] = this.formValue.value; // Update the student\n      this.currentEditIndex = null;\n    }\n    this.formValue.reset(); // Reset the form\n    this.showupdate = false; // Close the modal\n  }\n\n  deleteStudent(index: number) {\n    this.studentList.splice(index, 1); // Remove the student from the list\n  }\n\n  \n}\n"," <!--nav class=\"navbar navbar-light bg-dark\">\n    <div class=\"container-fluid\">\n        <h2 CLASS=\"text-light primary py-3\">STUDENT MANAGEMENT </h2>\n        <div class=\"d-flex\">\n              <button class=\"btn btn-success\" (click)=add() data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">Add Student</button> &nbsp;\n              <button class=\"btn btn-warning\">Logout</button>\n    </div>\n    </div>\n</nav>\n<table>\n<table class=\"table mt-4\">\n    <thead>\n        <tr>\n            <th scope=\"col\">S.Id</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Mobile</th>\n            <th scope=\"col\">City</th>\n            <th scope=\"col\">Action</th>\n            \n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>Gyan</td>\n            <td>abc.com</td>\n            <td>123</td>\n            <td>Noida</td>\n            <td>\n                <button class=\"btn  btn-info\"(click)=\"update()\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">Edit</button>&nbsp;\n                <button class=\"btn btn-danger\">Delete</button>\n             </td>\n        </tr>\n    </tbody>\n</table>\n\n\n  \n  <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div  style=\"background:blue\"class=\"modal-header\">\n          <h5 style=\"color: aliceblue ;font-size:20px;margin: left 62px;font-weight:620;\"class=\"modal-title\" id=\"exampleModalLabel\">STUDENT MANAGEMENT</h5>\n          <button type=\"button\" class=\"close btn-close\" data-dismiss=\"modal\" aria-label=\"Close\" >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formValue\"> \n                <div class=\"form-group\">\n                  <label for=\"exampleInputEmail1\">Name</label>\n                  <input type=\"name\" formControlName=\"name\"class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter your Name\">\n\n                  <small *ngIf=\"formValue.get('name')?.invalid && formValue.get('name')?.touched\" class=\"text-danger\"> Name is Required</small>\n                </div>\n           <br>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Email</label>\n                    <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter your email\">\n                    <small *ngIf=\"formValue.get('email')?.invalid && formValue.get('email')?.touched\"class=\"text-danger\">Email is Required</small>\n\n                </div>\n            <br>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Mobile</label>\n                    <input type=\"number\" formControlName=\"mobile\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter your mobile\">\n\n                    <small *ngIf=\"formValue.get('mobile')?.invalid && formValue.get('mobile')?.touched\"class=\"text-danger\">Mobile is Required</small>\n\n                </div>\n            <br>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">City</label>\n                    <input type=\"city\" formControlName=\"city\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter your city\">\n\n                    <small *ngIf=\"formValue.get('city')?.invalid && formValue.get('city')?.touched\"class=\"text-danger\">City is Required</small>\n\n                </div>\n                \n              </form>\n\n        </div>\n        <div  style=\"background: blue;\"class=\"modal-footer\">\n          <button type=\"button\"  class=\"btn btn-warning\" data-dismiss=\"modal\">Close</button>\n          <button *ngIf=\"showadd\" type=\"button\" class=\"btn btn-success\">Add</button>\n          <button *ngIf=\"showupdate\"type=\"button\" class=\"btn btn-success\">Update</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n   \n\n   <!-- p-table>\n            <ng-template pTemplate=\"caption\">\n                <div class=\"p-grid p-grid p-align-center p-justify-between w-100-p\">\n                    <span class=\"font-14\">Student details</span>\n                    <div class=\"p-col-fixed p-col-nogutter p-grid p-align-center\">\n\n                        <div class=\"type-search width-200 mr-8\" pTooltip=\"Global Search\" tooltipPosition=\"top\">\n                            <i class=\"left-icon icons8 icons8-search\"></i>\n                            <input type=\"text\" placeholder=\"Search in Events\" (input)=\"customGlobalFilter($event.target.value)\"\n                                class=\"pl-20 w-100-p\" pInputText>\n                        </div>\n\n                        <button type=\"button\" pButton class=\"ui-btn-primary\" [disabled]=\"isDefaultSelection\"\n                            label=\"Add Event\" (click)=\"addDataInEDFfile()\"> </button>\n                        <button type=\"button\" pButton class=\"ui-btn-primary ml-8\" [disabled]=\"isDefaultSelection || !eventData.length\"\n                            label=\"Save\" (click)=\"saveEDF()\" [pTooltip]=\"getTooltipText()\" tooltipPosition=\"right\"></button>\n\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template pTemplate=\"colgroup\" let-columns>\n                <colgroup>\n                    <col style=\"width:11%\">\n                    <col style=\"width:16%\">\n                    <col style=\"width:16%\">\n                    <col style=\"width:16%\">\n                    <col style=\"width:10%\">\n                    <col style=\"width:24%\">\n                    <col style=\"width:7%\">\n                </colgroup>\n            </ng-template>\n            <ng-template pTemplate=\"header\">\n                <tr>\n                    <ng-container>\n                         <th pReorderableColumn [pSortableColumn]=\"col.field\">\n                            {{col.header}}\n                            <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\n                                ariaLabelDesc=\"Activate to sort in descending order\"\n                                ariaLabelAsc=\"Activate to sort in ascending order\">\n                            </p-sortIcon>\n                        </th> -->\n                        <!--th> sdhfdsih</th-->\n                    <!--/ng-container>\n\n                    <th class=\"width-70 text-center\">Action</th>\n                </tr>\n            </ng-template>\n            <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n                <tr>\n                    <td [ngClass]=\"(rowData[col.field] >= 0 && col.field != 'FilteringMode' ) ||  col.field == 'Mode'?  'text-right' : 'text-left' \"\n                        *ngFor=\"let col of columns\">\n                        <span *ngIf=\"col.field != 'FilteringMode'\">\n                            {{rowData[col.field]}}\n                        </span>\n                        <span *ngIf=\"col.field == 'FilteringMode'\">\n                            {{rowData[col.field] | filterName}}\n                        </span>\n                    </td>\n                    <td class=\"text-center\">\n                        <button pButton type=\"button\" class=\"btn-icon\" [disabled]=\"isDefaultSelection\"\n                            (click)=\"clickUpdateRow(rowData)\" pTooltip=\"Update\"> <i class=\"las-edit\"></i> </button>\n                        <button pButton type=\"button\" class=\"btn-icon\" icon=\"icons8 icons8-trash\"\n                            [disabled]=\"isDefaultSelection\" (click)=\"delete_rowData(rowData)\"\n                            pTooltip=\"Delete\"></button>\n                    </td>\n\n                </tr>\n            </ng-template>\n            <ng-template pTemplate=\"emptymessage\" let-columns>\n                <tr>\n                    <td [attr.colspan]=\"tableCols.length + 2\" class=\"text-center \">\n                        <span>No records found</span>\n                    </td>\n                </tr>\n            </ng-template>\n        </p-table -->   \n\n\n\n          <nav class=\"navbar navbar-light bg-dark\">\n            <div class=\"container-fluid\">\n              <h2 class=\"text-light primary py-3\">STUDENT TABLE </h2>\n              <div class=\"d-flex\">\n                <button class=\"btn btn-success\" (click)=\"add()\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">Add Student</button>&nbsp;\n                <button class=\"btn btn-warning  \" (click)=\"logout()\">Logout</button>\n              </div>\n            </div>\n          </nav>\n          \n          <table class=\"table mt-4\">\n            <thead>\n              <tr>\n                <th scope=\"col\">S. Id</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Mobile</th>\n                <th scope=\"col\">City</th>\n                <th scope=\"col\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let student of studentList; let i = index\">\n                <td>{{ i + 1 }}</td>\n                <td>{{ student.name }}</td>\n                <td>{{ student.email }}</td>\n                <td>{{ student.mobile }}</td>\n                <td>{{ student.city }}</td>\n                <td>\n                  <button class=\"btn btn-info\" (click)=\"editStudent(i)\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">Edit</button>&nbsp;\n                  <button class=\"btn btn-danger\" (click)=\"deleteStudent(i)\">Delete</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          \n          <!-- Modal for Add/Edit Student -->\n          <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\" >\n            <div class=\"modal-dialog\" role=\"document\">\n              <div class=\"modal-content\">\n                <div style=\"background:blue\" class=\"modal-header\">\n                  <h5 style=\"color: aliceblue; font-size:20px; margin: left 62px; font-weight:620;\" class=\"modal-title\" id=\"exampleModalLabel\">STUDENT MANAGEMENT</h5>\n                  <button type=\"button\" class=\"close btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                  <form [formGroup]=\"formValue\">\n                    <div class=\"form-group\">\n                      <label for=\"name\">Name</label>\n                      <input type=\"text\" formControlName=\"name\" class=\"form-control\" id=\"name\" placeholder=\"Enter your Name\">\n                      <small *ngIf=\"formValue.get('name')?.invalid && formValue.get('name')?.touched\" class=\"text-danger\">Name is Required</small>\n                    </div>\n                    <br>\n                    <div class=\"form-group\">\n                      <label for=\"email\">Email</label>\n                      <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter your email\">\n                      <small *ngIf=\"formValue.get('email')?.invalid && formValue.get('email')?.touched\" class=\"text-danger\">Email is Required</small>\n                    </div>\n                    <br>\n                    <div class=\"form-group\">\n                      <label for=\"mobile\">Mobile</label>\n                      <input type=\"text\" formControlName=\"mobile\" class=\"form-control\" id=\"mobile\" placeholder=\"Enter your mobile\">\n                      <small *ngIf=\"formValue.get('mobile')?.invalid && formValue.get('mobile')?.touched\" class=\"text-danger\">Mobile is Required</small>\n                    </div>\n                    <br>\n                    <div class=\"form-group\">\n                      <label for=\"city\">City</label>\n                      <input type=\"text\" formControlName=\"city\" class=\"form-control\" id=\"city\" placeholder=\"Enter your city\">\n                      <small *ngIf=\"formValue.get('city')?.invalid && formValue.get('city')?.touched\" class=\"text-danger\">City is Required</small>\n                    </div>\n                  </form>\n                </div>\n                <div style=\"background: blue;\" class=\"modal-footer\">\n                  <button type=\"button\" class=\"btn btn-warning\" data-bs-dismiss=\"modal\" >Close</button>\n                  <button *ngIf=\"showadd\" type=\"button\" class=\"btn btn-success\" (click)=\"addStudent()\" data-bs-dismiss=\"modal\">Add</button>\n                  <button *ngIf=\"showupdate\" type=\"button\" class=\"btn btn-success\" (click)=\"updateStudent() \" data-bs-dismiss=\"modal\">Update</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          ","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}